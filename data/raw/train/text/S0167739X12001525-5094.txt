Listing 1 shows the rule to increase parameter storage formulated in the Drools language following the pattern presented in Fig. 4. Line 1 defines the name of the rule that is split into a condition part (when, lines 2–12) and an execution part (then, lines 13–17). Line 4 tries to find the SLA of an application, and stores its id in $slaID and the SLA into $slaApp. Line 6 looks for a set of actions for this $slaID where no storage action has been added yet (storage == false) in order to avoid contradicting actions for storage for one measurement. Line 8 searches for a measurement for the appropriate VM (vmID == $slaID) that has been inserted into working memory that is no prediction ($prediction == false) and where the percentage of utilized storage exceeds TThighr (storage_utilized>storage_HighTT), and stores used and provided values into $s_used and $s_provided, respectively. The predicted measurement for the next iteration is handled similarly in line 10. Finally, line 12 checks whether provided storage is still below the agreed value in the SLA. This is done, because in policy modes orange to red over-consumption is prohibited. The rules for policy modes green and green–orange would omit this line. Now, if all these conditions are met, the rule gets activated. When fired, line 15 calculates the new value for prr as explained in Fig. 4. This line (as line 12) would also be altered for policy modes green and green–orange. Line 17 then modifies the action container $as and inserts the appropriate storage action with the value for provided storage to be set. Other rules follow the same pattern as described here and in Fig. 4 for rules increasing resource allocations and in Fig. 5 for rules decreasing resource allocations.